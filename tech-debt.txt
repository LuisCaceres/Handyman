

// // Write an array with 32 unique nouns in singular.
// const values1 = ['toSingular', 'toPlural'];
//   const values2 = ['capitalize', 'uncapitalize'];

//   // Write a function that creates all possible combinations of the values in the two arrays.
//   function createCombinations(values1, values2) {
//     const combinations = [];

//     for (const value1 of values1) {
//       for (const value2 of values2) {
//         combinations.push([value1, value2]);
//       }
//     }

//     return combinations;
//   }

// const b = createCombinations(values1, values2);
// const o = createCombinations(b, b);

// const nouns1 = ['airplane', 'apple', 'box', 'car', 'cat', 'church', 'class', 'country', 'dog', 'entry', 'family', 'flower', 'game', 'house', 'idea', 'industry'];
// const nouns2 = ['job', 'life', 'key', 'map', 'name', 'office', 'party', 'question', 'reason', 'school', 'table', 'unit', 'value', 'wall', 'year', 'zone'];
// const list = [];

// let counter = 0;

// const strings = [];

// for (const p of o) {
//     let noun1 = new Word(nouns1.pop())[p[0][0]]();
//     noun1 = new Word(noun1)[p[0][1]]();
//     let noun2 = new Word(nouns2.pop())[p[1][0]]();
//     noun2 = new Word(noun2)[p[1][1]]();
//     strings.push(`const value${++counter} = new Word('${noun1}').format('${noun2}');
// chai.expect(value${counter}).to.equal('');`);
// }

// console.log(strings.join('\n'));

// debugger;

* `const value4 = new Word('COUNTRIES').format('entry');` doesn't return `countries`. Please fix.
* Add JSDOC @example to each function definition.
* Refactor the recursive function within the command handler so that it returns a list of text edits.
* argument `1` (number literal) in `const otherClocks = clocks.slice(1, 3);` is incorrectly considered for renaming. It causes an error and code execution stops. This occurs in file `utils.ts` in `const anotherNoun = symbol.noun.value.toUpperCase();`.
* Avoid compiling to both ES modules and CommonJS modules which bloats the size of this repository. ES modules are used for unit tests run by a browser and CommonJS modules are used by VS Code to run an extension in debug mode. Check regularly if VS Code extensions support ES modules. Check `package.json` and `tsconfig.json` files. Particularly `type: "module"` in a `package.json` file causes the extension to fail loading or to be in debug mode. 
* `formFields` cannot be renamed `fields`. The command does nothing.
* What should `formatSymbol('deletedBankAccounts', 'formFields')` return? deletedFormFields, formFields. This behaviour is undefined.
* The regular expression: /[A-Za-z]\w*(?=\W)/gd can possibly be used as a "catch-all" regular expression to identify symbols in a line of code. If this is the case, then no individual regular expression such as "declaration", "forOfLoop", "sortMethod" are even required. However, that "catch-all" regular expression incorrectly identifies reserved keywords such as `for` and `const' as symbols. Perhaps, a function is necessary to first remove any reserved keywords from a line of code.